{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport default _s(() => {\n  _s();\n\n  const [active, setActive] = useState('start');\n  const [score, setScore] = useState(0);\n  const [status, setStatus] = useState();\n  const [player, setPlayer] = useState(0);\n  const [computer, setComputer] = useState(0);\n\n  const handleResult = computer => {\n    if (computer === player) {\n      setStatus('DRAW');\n      return 'DRAW';\n    }\n\n    if (computer === 0 && player === 2 || computer === 1 && player === 0 || computer === 2 && player === 1) {\n      setStatus('YOU LOOSE');\n      setScore(prev => prev - 1);\n      return 'YOU LOOSE';\n    }\n\n    setStatus('YOU WIN');\n    setScore(prev => prev + 1);\n    return 'YOU WIN';\n  };\n\n  useEffect(() => {\n    if (active === 'loading') setTimeout(() => {\n      const jogada = Math.floor(Math.random() * 3);\n      setActive('end game');\n      setComputer(jogada);\n      handleResult(jogada);\n    }, 1000);\n  }, [active]);\n\n  const play = move => {\n    setActive('loading');\n    setPlayer(move);\n  };\n\n  const playAgain = () => {\n    setActive('start');\n  };\n\n  return {\n    play,\n    score,\n    status,\n    active,\n    computer,\n    player,\n    playAgain\n  };\n}, \"ENiFOaQ7rGsdcVRGn3Z0WLc+MV8=\");","map":{"version":3,"sources":["/home/janio/Desktop/estudos/frontend-challenge-1/src/hooks/useJokenpo.ts"],"names":["useEffect","useState","active","setActive","score","setScore","status","setStatus","player","setPlayer","computer","setComputer","handleResult","prev","setTimeout","jogada","Math","floor","random","play","move","playAgain"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,kBAAe,MAAM;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBF,QAAQ,CAAS,OAAT,CAApC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAS,CAAT,CAAlC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAS,CAAT,CAApC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAS,CAAT,CAAxC;;AAEA,QAAMW,YAAY,GAAIF,QAAD,IAAsB;AACzC,QAAIA,QAAQ,KAAKF,MAAjB,EAAyB;AACvBD,MAAAA,SAAS,CAAC,MAAD,CAAT;AACA,aAAO,MAAP;AACD;;AACD,QAAKG,QAAQ,KAAK,CAAb,IAAkBF,MAAM,KAAK,CAA9B,IAAqCE,QAAQ,KAAK,CAAb,IAAkBF,MAAM,KAAK,CAAlE,IAAyEE,QAAQ,KAAK,CAAb,IAAkBF,MAAM,KAAK,CAA1G,EAA8G;AAC5GD,MAAAA,SAAS,CAAC,WAAD,CAAT;AACAF,MAAAA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAR;AACA,aAAO,WAAP;AACD;;AACDN,IAAAA,SAAS,CAAC,SAAD,CAAT;AACAF,IAAAA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAR;AACA,WAAO,SAAP;AACD,GAbD;;AAeAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAM,KAAK,SAAf,EACEY,UAAU,CAAC,MAAM;AACf,YAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAf;AACAf,MAAAA,SAAS,CAAC,UAAD,CAAT;AACAQ,MAAAA,WAAW,CAACI,MAAD,CAAX;AACAH,MAAAA,YAAY,CAACG,MAAD,CAAZ;AACD,KALS,EAKP,IALO,CAAV;AAMH,GARQ,EAQN,CAACb,MAAD,CARM,CAAT;;AAUA,QAAMiB,IAAI,GAAIC,IAAD,IAAkB;AAC7BjB,IAAAA,SAAS,CAAC,SAAD,CAAT;AACAM,IAAAA,SAAS,CAACW,IAAD,CAAT;AACD,GAHD;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACtBlB,IAAAA,SAAS,CAAC,OAAD,CAAT;AACD,GAFD;;AAIA,SAAO;AAAEgB,IAAAA,IAAF;AAAQf,IAAAA,KAAR;AAAeE,IAAAA,MAAf;AAAuBJ,IAAAA,MAAvB;AAA+BQ,IAAAA,QAA/B;AAAyCF,IAAAA,MAAzC;AAAiDa,IAAAA;AAAjD,GAAP;AACD,CA1CD","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport default () => {\n  const [active, setActive] = useState<string>('start')\n  const [score, setScore] = useState<number>(0)\n  const [status, setStatus] = useState<string>()\n  const [player, setPlayer] = useState<number>(0)\n  const [computer, setComputer] = useState<number>(0)\n\n  const handleResult = (computer: number) => {\n    if (computer === player) {\n      setStatus('DRAW')\n      return 'DRAW'\n    }\n    if ((computer === 0 && player === 2) || (computer === 1 && player === 0) || (computer === 2 && player === 1)) {\n      setStatus('YOU LOOSE')\n      setScore(prev => prev - 1)\n      return 'YOU LOOSE'\n    }\n    setStatus('YOU WIN')\n    setScore(prev => prev + 1)\n    return 'YOU WIN'\n  }\n\n  useEffect(() => {\n    if (active === 'loading')\n      setTimeout(() => {\n        const jogada = Math.floor(Math.random() * 3)\n        setActive('end game')\n        setComputer(jogada)\n        handleResult(jogada)\n      }, 1000)\n  }, [active])\n\n  const play = (move: number) => {\n    setActive('loading')\n    setPlayer(move)\n  }\n\n  const playAgain = () => {\n    setActive('start')\n  }\n\n  return { play, score, status, active, computer, player, playAgain }\n}\n"]},"metadata":{},"sourceType":"module"}